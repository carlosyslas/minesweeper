{"version":3,"sources":["game/board/records.js","game/board/reducer.js","game/board/actions.js","game/board/selectors.js","game/status/selectors.js","game/status/constants.js","theme.js","game/board/index.js","game/status/actions.js","game/GameStatus.js","game/Game.js","home/index.js","game/status/reducer.js","game/reducer.js","rootReducer.js","App.js","serviceWorker.js","index.js"],"names":["CellRecord","Record","value","covered","flagged","initialState","List","HAS_MINE","isInBoardBoundaries","board","_ref","row","col","size","get","getMineValue","cell","getIn","isCellCovered","state","_ref4","reducer","arguments","length","undefined","_ref7","type","payload","reduceUncoverCell","_ref2","map","set","setIn","_ref3","width","height","mines","rows","cells","push","mine","Math","floor","random","mineValue","reduceCreateNewBoard","_ref5","reduceFlagCell","_ref6","reduceUnflagCell","selectBoard","selectCoveredCellsCount","flatten","count","selectGameStatus","GAME_STATUS","MENU","Symbol","RUNNING","LOST","WON","theme","bodyBackground","whiteColor","primaryColor","cellSize","minesCountColors","Cell","styled","div","_templateObject","props","Row","_templateObject2","Mine","_templateObject3","FlagContainer","_templateObject4","Flag","react_default","a","createElement","className","MinesCount","span","_templateObject5","CellContent","board_Flag","BoardScreen","handleCellClick","_this$props","_this","gameStatus","setGameStatus","uncoverCell","handleCellRightClick","e","_this$props2","unflagCell","flagCell","preventDefault","_this$props3","this","coveredCellsCount","_this2","_this$props4","createNewBoard","onClick","r","onContextMenu","board_CellContent","Component","mapDispatchToProps","connect","Container","GameStatus_templateObject","GameStatus","Game_templateObject","Game_Container","game_board","game_GameStatus","home_templateObject","Inner","home_templateObject2","Home","home_Container","Link","to","status","combineReducers","rootReducer","game","store","createStore","App","es","BrowserRouter","basename","process","Switch","Route","path","component","Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4fa965f6.chunk.js","sourcesContent":["import { Record } from \"immutable\";\n\nexport const CellRecord = Record({ value: 0, covered: true, flagged: false });\n","import { List } from \"immutable\";\nimport {\n  UNCOVER_CELL,\n  CREATE_NEW_BOARD,\n  FLAG_CELL,\n  UNFLAG_CELL\n} from \"./actions\";\nimport { CellRecord } from \"./records\";\n\nconst initialState = new List();\n\nexport const HAS_MINE = -1;\n\nconst isInBoardBoundaries = (board, { row, col }) =>\n  row >= 0 && col >= 0 && row < board.size && col < board.get(0).size;\n\n// TODO: use redux saga to reduce code complexity?\nconst reduceUncoverCell = (state, { row, col }) => {\n  if (!isInBoardBoundaries(state, { row, col })) {\n    return state;\n  }\n  const value = state.getIn([row, col, \"value\"]);\n  const covered = state.getIn([row, col, \"covered\"]);\n\n  if (!covered) {\n    return state;\n  }\n\n  if (value === HAS_MINE) {\n    state = state.map(row =>\n      row.map(cell => {\n        if (cell.get(\"value\") === HAS_MINE) {\n          return cell.set(\"covered\", false);\n          // TODO: unflag this cell as well.\n        }\n\n        return cell;\n      })\n    );\n  }\n\n  state = state\n    .setIn([row, col, \"covered\"], false)\n    .setIn([row, col, \"flagged\"], false);\n\n  if (value === 0 && covered) {\n    state = reduceUncoverCell(state, { row: row - 1, col: col - 1 });\n    state = reduceUncoverCell(state, { row: row - 1, col: col });\n    state = reduceUncoverCell(state, { row: row - 1, col: col + 1 });\n    state = reduceUncoverCell(state, { row: row, col: col - 1 });\n    state = reduceUncoverCell(state, { row: row, col: col + 1 });\n    state = reduceUncoverCell(state, { row: row + 1, col: col - 1 });\n    state = reduceUncoverCell(state, { row: row + 1, col: col });\n    state = reduceUncoverCell(state, { row: row + 1, col: col + 1 });\n  }\n\n  return state;\n};\n\nconst getMineValue = (board, row, col) => {\n  if (row < 0 || col < 0) {\n    return 0;\n  }\n\n  const cell = board.getIn([row, col]);\n  if (cell && cell.value === HAS_MINE) {\n    return 1;\n  }\n\n  return 0;\n};\n\n// TODO: add more tests for this function\nconst reduceCreateNewBoard = ({ width, height, mines }) => {\n  const rows = [];\n\n  for (let row = 0; row < height; row++) {\n    const cells = [];\n\n    for (let col = 0; col < width; col++) {\n      cells.push(new CellRecord({}));\n    }\n\n    rows.push(new List(cells));\n  }\n\n  let board = new List(rows);\n\n  for (let mine = 0; mine < mines; mine++) {\n    let row = Math.floor(Math.random() * height);\n    let col = Math.floor(Math.random() * width);\n\n    while (board.getIn([row, col, \"value\"]) === HAS_MINE) {\n      row = Math.floor(Math.random() * height);\n      col = Math.floor(Math.random() * width);\n    }\n\n    board = board.setIn([row, col, \"value\"], HAS_MINE);\n  }\n\n  for (let row = 0; row < height; row++) {\n    for (let col = 0; col < width; col++) {\n      let mineValue = board.getIn([row, col, \"value\"]);\n      if (mineValue !== HAS_MINE) {\n        // TODO: extract this logic\n        mineValue += getMineValue(board, row - 1, col - 1);\n        mineValue += getMineValue(board, row - 1, col);\n        mineValue += getMineValue(board, row - 1, col + 1);\n\n        mineValue += getMineValue(board, row, col - 1);\n        mineValue += getMineValue(board, row, col + 1);\n\n        mineValue += getMineValue(board, row + 1, col - 1);\n        mineValue += getMineValue(board, row + 1, col);\n        mineValue += getMineValue(board, row + 1, col + 1);\n\n        board = board.setIn([row, col, \"value\"], mineValue);\n      }\n    }\n  }\n\n  return board;\n};\n\nconst isCellCovered = (state, { row, col }) =>\n  state.getIn([row, col, \"covered\"]);\n\nconst reduceFlagCell = (state, { row, col }) => {\n  if (\n    !isInBoardBoundaries(state, { row, col }) ||\n    !isCellCovered(state, { row, col })\n  ) {\n    return state;\n  }\n\n  return state.setIn([row, col, \"flagged\"], true);\n};\n\nconst reduceUnflagCell = (state, { row, col }) => {\n  if (\n    !isInBoardBoundaries(state, { row, col }) ||\n    !isCellCovered(state, { row, col })\n  ) {\n    return state;\n  }\n\n  return state.setIn([row, col, \"flagged\"], false);\n};\n\nconst reducer = (state = initialState, { type, payload } = {}) => {\n  switch (type) {\n    case UNCOVER_CELL:\n      return reduceUncoverCell(state, payload);\n    case CREATE_NEW_BOARD:\n      return reduceCreateNewBoard(payload);\n    case FLAG_CELL:\n      return reduceFlagCell(state, payload);\n    case UNFLAG_CELL:\n      return reduceUnflagCell(state, payload);\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","export const CREATE_NEW_BOARD = \"CREATE_NEW_BOARD\";\nexport const UNCOVER_CELL = \"UNCOVER_CELL\";\nexport const FLAG_CELL = \"FLAG_CELL\";\nexport const UNFLAG_CELL = \"UNFLAG_CELL\";\n\nexport const createNewBoard = ({ width, height, mines }) => ({\n  type: CREATE_NEW_BOARD,\n  payload: {\n    width,\n    height,\n    mines\n  }\n});\n\nexport const uncoverCell = ({ row, col }) => ({\n  type: UNCOVER_CELL,\n  payload: {\n    row,\n    col\n  }\n});\n\nexport const flagCell = ({ row, col }) => ({\n  type: FLAG_CELL,\n  payload: {\n    row,\n    col\n  }\n});\n\nexport const unflagCell = ({ row, col }) => ({\n  type: UNFLAG_CELL,\n  payload: {\n    row,\n    col\n  }\n});\n","import { HAS_MINE } from \"./reducer\";\n\nexport const selectBoard = state => state.getIn([\"game\", \"board\"]);\n\nexport const selectCoveredCellsCount = state =>\n  selectBoard(state)\n    .flatten()\n    .count(cell => cell.get(\"covered\") && cell.get(\"value\") !== HAS_MINE);\n","export const selectGameStatus = state => state.getIn([\"game\", \"status\"]);\n","export const GAME_STATUS = {\n  MENU: Symbol(\"menu\"),\n  RUNNING: Symbol(\"running\"),\n  LOST: Symbol(\"lost\"),\n  WON: Symbol(\"won\")\n};\n","export default {\n  bodyBackground: \"#333\",\n  whiteColor: \"#fff\",\n  primaryColor: \"#6cb7ff\",\n  cellSize: 30,\n  minesCountColors: [\n    \"#00C9A7\",\n    \"#008F7A\",\n    \"#0089BA\",\n    \"#2C73D2\",\n    \"#845EC2\",\n    \"#D65DB1\",\n    \"#FF6F91\",\n    \"#FF9671\"\n  ]\n};\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport { connect } from \"react-redux\";\nimport { selectBoard, selectCoveredCellsCount } from \"./selectors\";\nimport { createNewBoard, uncoverCell, flagCell, unflagCell } from \"./actions\";\nimport { selectGameStatus } from \"../status/selectors\";\nimport { HAS_MINE } from \"./reducer\";\nimport { setGameStatus } from \"../status/actions\";\nimport { GAME_STATUS } from \"../status/constants\";\nimport theme from \"../../theme\";\n\nconst Cell = styled.div`\n  width: ${theme.cellSize}px;\n  height: ${theme.cellSize}px;\n  background: ${props =>\n    props.covered ? theme.primaryColor : theme.whiteColor};\n  border: 2px solid ${theme.bodyBackground};\n  border-radius: 4px;\n  text-align: center;\n  font-size: ${theme.cellSize * 0.6}px;\n  line-height: ${theme.cellSize}px;\n  transition: 0.3s;\n  box-shadow: 0px 0px 5px 3px rgba(0, 0, 0, 0.15) inset;\n  cursor: pointer;\n  :hover {\n    filter: brightness(1.2);\n  }\n`;\n\nconst Row = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nconst Mine = styled.div`\n  width: ${theme.cellSize / 2}px;\n  height: ${theme.cellSize / 2}px;\n  border-radius: 50%;\n  background: #ff7500;\n  margin: 0 auto;\n  display: inline-block;\n  vertical-align: middle;\n  box-shadow: 0px 0px 5px 1px #ff3f00, 0px 0px 3px 0px #fffc00 inset;\n`;\n\nconst FlagContainer = styled.div`\n  font-size: 12px;\n  color: red;\n`;\nconst Flag = () => (\n  <FlagContainer>\n    <i className=\"fas fa-flag\" />\n  </FlagContainer>\n);\n\nconst MinesCount = styled.span`\n  color: ${props => theme.minesCountColors[props.value - 1]};\n`;\n\nconst CellContent = ({ value, covered, flagged }) => {\n  if (flagged) {\n    return <Flag />;\n  }\n\n  if (value === 0) {\n    return null;\n  }\n\n  if (covered) {\n    return null;\n  }\n\n  if (value < 0) {\n    return <Mine />;\n  }\n\n  return <MinesCount value={value}>{value}</MinesCount>;\n};\n\nclass BoardScreen extends Component {\n  componentDidUpdate() {\n    const { setGameStatus, coveredCellsCount } = this.props;\n\n    if (coveredCellsCount === 0) {\n      setGameStatus(GAME_STATUS.WON);\n    }\n  }\n\n  handleCellClick = ({ row, col }) => {\n    const { board, gameStatus, setGameStatus, uncoverCell } = this.props;\n\n    if (gameStatus !== GAME_STATUS.RUNNING) {\n      return;\n    }\n\n    uncoverCell({ row, col });\n    if (board.getIn([row, col, \"value\"]) === HAS_MINE) {\n      setGameStatus(GAME_STATUS.LOST);\n    }\n  };\n\n  handleCellRightClick = (e, { row, col }) => {\n    const { board, gameStatus, unflagCell, flagCell } = this.props;\n    e.preventDefault();\n\n    if (gameStatus !== GAME_STATUS.RUNNING) {\n      return;\n    }\n\n    if (board.getIn([row, col, \"flagged\"])) {\n      unflagCell({ row, col });\n    } else {\n      flagCell({ row, col });\n    }\n  };\n\n  render() {\n    const {\n      board,\n      createNewBoard,\n      setGameStatus,\n      coveredCellsCount\n    } = this.props;\n\n    return (\n      <div>\n        COUNT:{coveredCellsCount}\n        <button\n          onClick={() => {\n            setGameStatus(GAME_STATUS.RUNNING);\n            createNewBoard({ width: 9, height: 9, mines: 1 });\n          }}\n        >\n          New\n        </button>\n        {board.map((row, r) => (\n          <Row>\n            {row.map((cell, col) => (\n              <Cell\n                covered={cell.covered}\n                onClick={() => this.handleCellClick({ row: r, col })}\n                onContextMenu={e =>\n                  this.handleCellRightClick(e, { row: r, col })\n                }\n              >\n                <CellContent\n                  value={cell.value}\n                  covered={cell.covered}\n                  flagged={cell.flagged}\n                />\n              </Cell>\n            ))}\n          </Row>\n        ))}\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => ({\n  board: selectBoard(state),\n  gameStatus: selectGameStatus(state),\n  coveredCellsCount: selectCoveredCellsCount(state)\n});\n\nconst mapDispatchToProps = {\n  createNewBoard,\n  uncoverCell,\n  flagCell,\n  unflagCell,\n  setGameStatus\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(BoardScreen);\n","export const SET_GAME_STATUS = \"SET_GAME_STATUS\";\n\nexport const setGameStatus = payload => ({\n  type: SET_GAME_STATUS,\n  payload\n});\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { GAME_STATUS } from \"./status/constants\";\nimport theme from \"../theme\";\n\nconst Container = styled.div`\n  position: fixed;\n  top: 150px;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  padding: 50px 150px;\n  font-size: 30px;\n  color: ${theme.bodyBackground}\n  text-shadow: -2px -2px 0 #fff, 0px -2px 0 #fff, 2px -2px 0 #fff,\n    -2px 2px 0 #fff, 0px 2px #fff, 2px 2px 0 #fff, 0px 0px 60px #fff,\n    0px 0px 40px #fff, 0px 0px 20px #fff;\n`;\n\nconst GameStatus = ({ gameStatus }) =>\n  gameStatus !== GAME_STATUS.RUNNING &&\n  gameStatus !== GAME_STATUS.MENU && (\n    <Container>\n      {gameStatus === GAME_STATUS.LOST && <h2>Game Over</h2>}\n      {gameStatus === GAME_STATUS.WON && <h2>Congratulations!</h2>}\n    </Container>\n  );\n\nexport default GameStatus;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\nimport Board from \"./board\";\nimport { selectGameStatus } from \"./status/selectors\";\nimport GameStatus from \"./GameStatus\";\n\nconst Container = styled.div`\n  max-width: 960px;\n  margin: 30px auto;\n  text-align: center;\n`;\n\nconst Game = ({ gameStatus }) => (\n  <Container>\n    <Board />\n    <GameStatus gameStatus={gameStatus} />\n  </Container>\n);\n\nconst mapStateToProps = state => ({\n  gameStatus: selectGameStatus(state)\n});\n\nexport default connect(mapStateToProps)(Game);\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  color: #fff;\n  max-width: 960px;\n  margin: 0 auto;\n`;\n\nconst Inner = styled.div`\n  margin: 30px;\n`;\n\nconst Home = () => (\n  <Container>\n    <Inner>\n      <h1>Start new game</h1>\n      Home <Link to=\"/minesweeper/game\">Game</Link>\n    </Inner>\n  </Container>\n);\n\nexport default Home;\n","import { SET_GAME_STATUS } from \"./actions\";\nimport { GAME_STATUS } from \"./constants\";\n\nconst status = (state = GAME_STATUS.MENU, { type, payload } = {}) => {\n  if (type === SET_GAME_STATUS) {\n    return payload;\n  }\n\n  return state;\n};\n\nexport default status;\n","import { combineReducers } from \"redux-immutable\";\nimport board from \"./board/reducer\";\nimport status from \"./status/reducer\";\n\nexport default combineReducers({\n  board,\n  status\n});\n","import { combineReducers } from \"redux-immutable\";\nimport game from \"./game/reducer\";\n\nconst rootReducer = combineReducers({\n  game\n});\n\nexport default rootReducer;\n","import React, { Component } from \"react\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport { Switch, Route, Redirect } from \"react-router\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport Game from \"./game/Game\";\nimport Home from \"./home\";\nimport rootReducer from \"./rootReducer\";\n\nconst store = createStore(rootReducer);\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n          <Switch>\n            <Route path=\"/game\" component={Game} />\n            <Route path=\"/\" component={Home} />\n          </Switch>\n        </BrowserRouter>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}