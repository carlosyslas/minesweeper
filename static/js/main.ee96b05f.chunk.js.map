{"version":3,"sources":["board/selectors.js","board/index.js","board/actions.js","home/index.js","board/records.js","board/reducer.js","rootReducer.js","App.js","serviceWorker.js","index.js"],"names":["selectBoard","state","get","theme","Cell","styled","div","_templateObject","props","covered","Row","_templateObject2","Container","_templateObject3","Mine","_templateObject4","FlagContainer","_templateObject5","Flag","react_default","a","createElement","className","CellContent","_ref","value","flagged","board_Flag","mapDispatchToProps","createNewBoard","type","payload","width","height","mines","uncoverCell","_ref2","row","col","flagCell","_ref3","unflagCell","_ref4","connect","board","onClick","map","r","cell","onContextMenu","e","preventDefault","board_CellContent","home_templateObject","Inner","home_templateObject2","Home","home_Container","Link","to","CellRecord","Record","initialState","List","isInBoardBoundaries","size","getMineValue","getIn","isCellCovered","reducer","arguments","length","undefined","_ref7","set","setIn","reduceUncoverCell","rows","cells","push","mine","Math","floor","random","mineValue","reduceCreateNewBoard","_ref5","reduceFlagCell","_ref6","reduceUnflagCell","rootReducer","combineReducers","store","createStore","App","es","BrowserRouter","Switch","Route","path","component","Board","exact","src_board","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ee96b05f.chunk.js","sourcesContent":["export const selectBoard = state => state.get(\"board\");\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { connect } from \"react-redux\";\nimport { selectBoard } from \"./selectors\";\nimport { createNewBoard, uncoverCell, flagCell, unflagCell } from \"./actions\";\n\nconst theme = {\n  cellSize: 25\n};\n\nconst Cell = styled.div`\n  width: ${theme.cellSize}px;\n  height: ${theme.cellSize}px;\n  background: ${props => (props.covered ? \"#6cb7ff\" : \"#fff\")};\n  border: 1px solid;\n  text-align: center;\n  font-size: ${theme.cellSize * 0.6}px;\n  line-height: ${theme.cellSize}px;\n  transition: background 0.3s;\n  box-shadow: 0px 0px 5px 3px rgba(0, 0, 0, 0.1) inset;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nconst Container = styled.div`\n  max-width: 960px;\n  margin: 0 auto;\n  text-align: center;\n`;\n\nconst Mine = styled.div`\n  width: ${theme.cellSize / 2}px;\n  height: ${theme.cellSize / 2}px;\n  border-radius: 50%;\n  background: #ff7500;\n  margin: 0 auto;\n  display: inline-block;\n  vertical-align: middle;\n  box-shadow: 0px 0px 5px 1px #ff3f00, 0px 0px 3px 0px #fffc00 inset;\n`;\n\nconst FlagContainer = styled.div`\n  font-size: 12px;\n  color: red;\n`;\nconst Flag = () => (\n  <FlagContainer>\n    <i className=\"fas fa-flag\" />\n  </FlagContainer>\n);\n\nconst CellContent = ({ value, covered, flagged }) => {\n  if (flagged) {\n    return <Flag />;\n  }\n\n  if (value === 0) {\n    return null;\n  }\n\n  if (covered) {\n    return null;\n  }\n\n  if (value < 0) {\n    return <Mine />;\n  }\n\n  return <div>{value}</div>;\n};\n\nconst BoardScreen = ({\n  board,\n  createNewBoard,\n  uncoverCell,\n  flagCell,\n  unflagCell\n}) => (\n  <Container>\n    <button\n      onClick={() => createNewBoard({ width: 10, height: 10, mines: 10 })}\n    >\n      New\n    </button>\n    {board.map((row, r) => (\n      <Row>\n        {row.map((cell, col) => (\n          <Cell\n            covered={cell.covered}\n            onClick={() => uncoverCell({ row: r, col })}\n            onContextMenu={e => {\n              e.preventDefault();\n\n              if (cell.flagged) {\n                unflagCell({ row: r, col });\n              } else {\n                flagCell({ row: r, col });\n              }\n            }}\n          >\n            <CellContent\n              value={cell.value}\n              covered={cell.covered}\n              flagged={cell.flagged}\n            />\n          </Cell>\n        ))}\n      </Row>\n    ))}\n  </Container>\n);\n\nconst mapStateToProps = state => ({\n  board: selectBoard(state)\n});\n\nconst mapDispatchToProps = {\n  createNewBoard,\n  uncoverCell,\n  flagCell,\n  unflagCell\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(BoardScreen);\n","export const CREATE_NEW_BOARD = \"CREATE_NEW_BOARD\";\nexport const UNCOVER_CELL = \"UNCOVER_CELL\";\nexport const FLAG_CELL = \"FLAG_CELL\";\nexport const UNFLAG_CELL = \"UNFLAG_CELL\";\n\nexport const createNewBoard = ({ width, height, mines }) => ({\n  type: CREATE_NEW_BOARD,\n  payload: {\n    width,\n    height,\n    mines\n  }\n});\n\nexport const uncoverCell = ({ row, col }) => ({\n  type: UNCOVER_CELL,\n  payload: {\n    row,\n    col\n  }\n});\n\nexport const flagCell = ({ row, col }) => ({\n  type: FLAG_CELL,\n  payload: {\n    row,\n    col\n  }\n});\n\nexport const unflagCell = ({ row, col }) => ({\n  type: UNFLAG_CELL,\n  payload: {\n    row,\n    col\n  }\n});\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  color: #fff;\n  max-width: 960px;\n  margin: 0 auto;\n`;\n\nconst Inner = styled.div`\n  margin: 30px;\n`;\n\nconst Home = () => (\n  <Container>\n    <Inner>\n      <h1>Start new game</h1>\n      Home <Link to=\"/game\">Game</Link>\n    </Inner>\n  </Container>\n);\n\nexport default Home;\n","import { Record } from \"immutable\";\n\nexport const CellRecord = Record({ value: 0, covered: true, flagged: false });\n","import { List } from \"immutable\";\nimport {\n  UNCOVER_CELL,\n  CREATE_NEW_BOARD,\n  FLAG_CELL,\n  UNFLAG_CELL\n} from \"./actions\";\nimport { CellRecord } from \"./records\";\nimport { selectIsCellCovered } from \"./selectors\";\n\nconst initialState = new List();\n\nconst HAS_MINE = -1;\n\nconst isInBoardBoundaries = (board, { row, col }) =>\n  row >= 0 && col >= 0 && row < board.size && col < board.get(0).size;\n\n// TODO: use redux saga to reduce code complexity?\nconst reduceUncoverCell = (state, { row, col }) => {\n  if (!isInBoardBoundaries(state, { row, col })) {\n    return state;\n  }\n\n  if (state.getIn([row, col, \"value\"]) === HAS_MINE) {\n    state = state.map(row =>\n      row.map(cell => {\n        if (cell.get(\"value\") === HAS_MINE) {\n          return cell.set(\"covered\", false);\n        }\n\n        return cell;\n      })\n    );\n  }\n\n  return state\n    .setIn([row, col, \"covered\"], false)\n    .setIn([row, col, \"flagged\"], false);\n};\n\nconst getMineValue = (board, row, col) => {\n  if (row < 0 || col < 0) {\n    return 0;\n  }\n\n  const cell = board.getIn([row, col]);\n  if (cell && cell.value === HAS_MINE) {\n    return 1;\n  }\n\n  return 0;\n};\n\n// TODO: add more tests for this function\nconst reduceCreateNewBoard = ({ width, height, mines }) => {\n  const rows = [];\n\n  for (let row = 0; row < height; row++) {\n    const cells = [];\n\n    for (let col = 0; col < width; col++) {\n      cells.push(new CellRecord({}));\n    }\n\n    rows.push(new List(cells));\n  }\n\n  let board = new List(rows);\n\n  for (let mine = 0; mine < mines; mine++) {\n    let row = Math.floor(Math.random() * height);\n    let col = Math.floor(Math.random() * width);\n\n    while (board.getIn([row, col, \"value\"]) === HAS_MINE) {\n      row = Math.floor(Math.random() * height);\n      col = Math.floor(Math.random() * width);\n    }\n\n    board = board.setIn([row, col, \"value\"], HAS_MINE);\n  }\n\n  for (let row = 0; row < height; row++) {\n    for (let col = 0; col < width; col++) {\n      let mineValue = board.getIn([row, col, \"value\"]);\n      if (mineValue !== HAS_MINE) {\n        // TODO: extract this logic\n        mineValue += getMineValue(board, row - 1, col - 1);\n        mineValue += getMineValue(board, row - 1, col);\n        mineValue += getMineValue(board, row - 1, col + 1);\n\n        mineValue += getMineValue(board, row, col - 1);\n        mineValue += getMineValue(board, row, col + 1);\n\n        mineValue += getMineValue(board, row + 1, col - 1);\n        mineValue += getMineValue(board, row + 1, col);\n        mineValue += getMineValue(board, row + 1, col + 1);\n\n        board = board.setIn([row, col, \"value\"], mineValue);\n      }\n    }\n  }\n\n  return board;\n};\n\nconst isCellCovered = (state, { row, col }) =>\n  state.getIn([row, col, \"covered\"]);\n\nconst reduceFlagCell = (state, { row, col }) => {\n  if (\n    !isInBoardBoundaries(state, { row, col }) ||\n    !isCellCovered(state, { row, col })\n  ) {\n    return state;\n  }\n\n  return state.setIn([row, col, \"flagged\"], true);\n};\n\nconst reduceUnflagCell = (state, { row, col }) => {\n  if (\n    !isInBoardBoundaries(state, { row, col }) ||\n    !isCellCovered(state, { row, col })\n  ) {\n    return state;\n  }\n\n  return state.setIn([row, col, \"flagged\"], false);\n};\n\nconst reducer = (state = initialState, { type, payload } = {}) => {\n  switch (type) {\n    case UNCOVER_CELL:\n      return reduceUncoverCell(state, payload);\n    case CREATE_NEW_BOARD:\n      return reduceCreateNewBoard(payload);\n    case FLAG_CELL:\n      return reduceFlagCell(state, payload);\n    case UNFLAG_CELL:\n      return reduceUnflagCell(state, payload);\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from \"redux-immutable\";\nimport board from \"./board/reducer\";\n\nconst rootReducer = combineReducers({\n  board\n});\n\nexport default rootReducer;\n","import React, { Component } from \"react\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport { Switch, Route } from \"react-router\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport Board from \"./board\";\nimport Home from \"./home\";\nimport rootReducer from \"./rootReducer\";\nimport \"./App.css\";\n\nconst store = createStore(rootReducer);\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <BrowserRouter>\n          <Switch>\n            <Route path=\"/game\" component={Board} />\n            <Route exact path=\"/\" component={Home} />\n            <Board />\n          </Switch>\n        </BrowserRouter>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}